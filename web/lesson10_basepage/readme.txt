PO 模式
在 ui 测试当中，必须要使用 PO 模式吗？
不一定，为了：可维护，可读性强，可扩展，可复用性

什么是 PO 模式
字面意义：就是把浏览器当中某个页面（特征，操作）转化代码（对象）（属性和方法）
PO 本质：就是对所写的代码一种封装形式

-------------------------------------
参数化，数据驱动，DDT
数据驱动是思想，参数化是实现数据驱动的手段形式。
DDT：data-driven testing 数据驱动测试
数据驱动：如果有同一套代码，但是只有数据不一样，把代码逻辑提取出来，用函数表示（封装）
就是当测试用例所有的逻辑都一样，只有数据不同的时候，我们可以把数据提取出来，
然后用数据去分别带入测试用例函数当中

数据驱动不是万能的，有些场景不适合用数据驱动。
数据驱动的好处：
- 实现了数据和代码的分离，好维护
- 简化代码，不需要写重复的函数名

数据驱动的坏处：
- 数据驱动不方便调试

通过 python 模块存放测试数据，实现数据驱动

--------------------------------------------
url配置，项目配置

yaml 文件，冒号后一定要空格。
编写读取yaml文件的程序：通用的

写在 py 文件当中
------------------------------------------
分层设计：元素定位
放在类属性中
一定要注意 find_element(*locator)


什么时候返回self,什么时候返回Webdriver其他对象
不需要获取数据进行操作就返回self ，
返回self 方便链式调用

# basepage
-------------------------------
其他功能梳理一下做自动化测试
basepage
老师账号添加课程功能

faker 生成中文  博客
yuz.one/faker-ku-sheng-cheng-shu-ju/

-------------------------------------
通用操作的封装：basepage
通用操作：不管我的项目怎么变化，只要是浏览器操作，我都可以直接导入使用
不通用浏览器操作：当页面，当项目发生变化的时候，这个方法就失效了

---------------------------------------------------------------
下节：关键字驱动，效率提升，